<?php

/**
 * Class DropSharkQueueTestCase.
 */
class DropSharkQueueTestCase extends DrupalWebTestCase {

  /**
   * Defines test information.
   *
   * @return array
   *   Test definition info.
   */
  public static function getInfo() {
    return array(
      'name' => 'DropShark data queue',
      'description' => 'Tests functionality of the data queue.',
      'group' => 'DropShark',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    $modules = array('dropshark');
    parent::setUp($modules);
  }

  /**
   * Tests functionality of the queue.
   */
  public function testQueue() {
    $request = new DropSharkUnitTestRequest('host', 'token');
    $request->setScenario('queue_transmit');
    $q = new DropSharkDbQueue($request, 'site-id');

    $count_query = 'SELECT COUNT(*) FROM {dropshark_queue}';
    $lock_query = 'UPDATE {dropshark_queue} SET lock_id = ? , lock_time = ? LIMIT 1';

    // Add items to queue.
    $q->add(array('data_1'));
    $q->add(array('data_2'));
    $q->add(array('data_3'));

    // Check that the added data was not yet persistently stored.
    $val = db_query($count_query)->fetchField();
    $this->assertEqual(0, $val, 'Queue empty.');

    // Make sure our items made it into the persistent storage.
    $q->persist();

    $val = db_query($count_query)->fetchField();
    $this->assertEqual(3, $val, '3 items in queue.');

    // Lock one item and process the queue.
    db_query($lock_query, array(__FUNCTION__, time() - DROPSHARK_QUEUE_LOCK_MAX_DEFAULT + 5));
    $q->transmit();

    // Verify locked item remains, others processed.
    $val = db_query($count_query)->fetchField();
    $this->assertEqual(1, $val, '1 item remaining in queue.');

    // Expire the remaining lock.
    db_query($lock_query, array(__FUNCTION__, time() - DROPSHARK_QUEUE_LOCK_MAX_DEFAULT - 5));
    $q->transmit();

    // Verify lock expires.
    $val = db_query($count_query)->fetchField();
    $this->assertEqual(0, $val, 'Queue empty.');
  }

}
