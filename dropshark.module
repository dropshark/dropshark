<?php

/**
 * @file
 * DropShark module code.
 */

use Linfo\Linfo;

define('DROPSHARK_HOST_DEFAULT', 'https://data.dropshark.io');
define('DROPSHARK_QUEUE_DEFAULT', 'DropSharkDbQueue');
define('DROPSHARK_QUEUE_LOCK_MAX_DEFAULT', 300);
define('DROPSHARK_QUEUE_MAX_PROCESS_DEFAULT', 100);
define('DROPSHARK_REQUEST_DEFAULT', 'DropSharkRequest');
define('DROPSHARK_LINFO_AUTOLOADER', 'sites/all/libraries/linfo/standalone_autoload.php');

/**
 * Implements hook_menu().
 */
function dropshark_menu() {
  $items['admin/config/services/dropshark'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'DropShark',
    'description' => 'Configure your site to utilize the DropShark monitoring, trending, and alerts service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dropshark_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dropshark.admin.inc',
  );

  $items['dropshark/collect'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'DropShark',
    'description' => 'Endpoint to trigger data collection.',
    'page callback' => 'dropshark_collect_page',
    // Access control/DoS prevention is enforced in page callback.
    'access callback' => TRUE,
    'file' => 'dropshark.pages.inc',
  );

  return $items;
}

/**
 * Gets the configured DropShark queue processing class.
 *
 * @return \DropSharkQueueInterface
 *   The queue processing class configured for use.
 */
function dropshark_get_queue() {
  $queue = &drupal_static(__FUNCTION__);

  if (!$queue) {
    $site_id = variable_get('dropshark_site_id');
    $request = dropshark_get_request();
    $class = variable_get('dropshark_queue_class', DROPSHARK_QUEUE_DEFAULT);
    $queue = new $class($request, $site_id);
  }

  return $queue;
}

/**
 * Gets the configured DropShark request handling class.
 *
 * @return \DropSharkRequestInterface
 *   The request handling class configured for use.
 */
function dropshark_get_request() {
  $request = &drupal_static(__FUNCTION__);

  if (!$request) {
    $class = variable_get('dropshark_request_class', DROPSHARK_REQUEST_DEFAULT);
    $host = variable_get('dropshark_host', DROPSHARK_HOST_DEFAULT);
    $token = variable_get('dropshark_site_token');
    $request = new $class($host, $token);
  }

  return $request;
}

/**
 * Registers dropshark_finalize_request() as a shutdown function.
 */
function dropshark_set_shutdown_function() {
  static $registered = FALSE;

  if (!$registered) {
    drupal_register_shutdown_function('dropshark_finalize_request');
    $registered = TRUE;
  }
}

/**
 * Finish processing on the end of the page request.
 *
 * Runs collectors which have been deferred until the end of the request, then
 * saves data from static request queue into persistent a queue.
 */
function dropshark_finalize_request() {
  $queue = dropshark_get_queue();
  $queue->processDeferred();

  if ($queue->needsImmediateTransmit()) {
    $queue->transmit();
  }

  $queue->persist();
}

/**
 * Get information on available data collectors.
 *
 * @param bool $reset
 *   Indicates if cached collector should be reset and rebuilt.
 *
 * @return array
 *   An array of information describing the installed collectors.
 */
function dropshark_get_collector_info($reset = FALSE) {
  $collectors = drupal_static(__FUNCTION__);

  if ($reset || ($collectors === NULL)) {
    if ((!$reset) && $cache = cache_get('dropshark_collector_info')) {
      $collectors = $cache->data;
    }
    else {
      $hook = 'dropshark_collector_info';
      $collectors = array();
      foreach (module_implements($hook) as $module) {
        module_load_include('inc', $module, $module . '.dropshark');
        $collectors = array_merge($collectors, module_invoke($module, $hook));
      }
      drupal_alter($hook, $collectors);
      cache_set('dropshark_collector_info', $collectors);
    }
  }

  return $collectors;
}

/**
 * Instantiate a collector.
 *
 * @param string $collector_id
 *   The collector's ID.
 * @param \DropSharkQueueInterface $queue
 *   A queue handling object.
 * @param string $site_id
 *   The site ID.
 *
 * @return \DropSharkCollectorInterface
 *   The collector.
 */
function dropshark_get_collector($collector_id, \DropSharkQueueInterface $queue, $site_id) {
  $collectors = dropshark_get_collector_info();

  if (!empty($collectors[$collector_id]['class'])) {
    $class = $collectors[$collector_id]['class'];
    return new $class($collectors[$collector_id], $queue, $site_id);
  }
}

/**
 * Implements hook_dropshark_collector_info().
 */
function dropshark_dropshark_collector_info() {
  $collectors['apc'] = array(
    'class' => 'DropSharkPhpApcCollector',
  );

  $collectors['disk'] = array(
    'class' => 'DropSharkDiskCollector',
  );

  $collectors['drupal_status'] = array(
    'class' => 'DropSharkDrupalStatusCollector',
  );

  $collectors['drupal_updates'] = array(
    'class' => 'DropSharkDrupalUpdateStatusCollector',
  );

  $collectors['load'] = array(
    'class' => 'DropSharkLoadCollector',
  );

  $collectors['memcache'] = array(
    'class' => 'DropSharkMemcacheCollector',
  );

  $collectors['memory'] = array(
    'class' => 'DropSharkMemoryCollector',
  );

  $collectors['opcache'] = array(
    'class' => 'DropSharkPhpOpcacheCollector',
  );

  $collectors['swap'] = array(
    'class' => 'DropSharkSwapCollector',
  );

  return $collectors;
}

/**
 * Initiate data collection for an event.
 *
 * Routes data to available collectors in order to let each decide whether or
 * not to log information.
 *
 * @param string $event
 *   A value indicating an event or type of an event which has occurred.
 * @param array $data
 *   Additional data to send to the collector.
 * @param bool $immediate
 *   Indicates if the data should be transmitted as a part of this HTTP request.
 */
function dropshark_handle_event($event, array $data = array(), $immediate = FALSE) {
  $queue = dropshark_get_queue();
  $site_id = variable_get('dropshark_site_id');

  foreach (dropshark_get_collector_info() as $name => $info) {
    $collector = dropshark_get_collector($name, $queue, $site_id);
    $collector->collect($event, $data);
  }

  if ($immediate) {
    $queue->setImmediateTransmit();
  }

  if ($queue->needsImmediateTransmit() || $queue->hasDeferred()) {
    dropshark_set_shutdown_function();
  }
}

/**
 * Instantiate the Linfo library.
 *
 * @return \Linfo\Linfo|false
 *   The Linfo library, or FALSE if not present.
 */
function dropshark_get_linfo() {
  $linfo = &drupal_static(__FUNCTION__, NULL);

  if ($linfo === NULL) {
    // @todo: dynamic settings handling.
    $settings['show']['mounts_options'] = FALSE;

    // If not available via Composer, attempt to use the built-in autoloader.
    if (!class_exists('\Linfo\Linfo')) {
      $file = DROPSHARK_LINFO_AUTOLOADER;
      if (file_exists(DROPSHARK_LINFO_AUTOLOADER)) {
        include $file;
      }
    }

    // If it's still not there, then we can't do anything.
    if (!class_exists('\Linfo\Linfo')) {
      return $linfo = FALSE;
    }

    $linfo = new Linfo($settings);
  }

  return $linfo;
}

/**
 * Implements hook_cron().
 */
function dropshark_cron() {
  if (variable_get('dropshark_cron', TRUE)) {
    dropshark_handle_event('all', array(), TRUE);
  }
}

/**
 * Produces a fingerprint of the site and environment.
 *
 * This is sent along with the data submitted to the DropShark backend and is
 * used to validate that the site is the same site which acquired the token.
 * By rejecting data with an invalid fingerprint, we can ignore data coming from
 * other, likely non-production, environments.
 *
 * @return string
 *   The fingerprint for the site and environment.
 */
function dropshark_site_fingerprint() {
  $fingerprint = &drupal_static(__FUNCTION__);

  if (!$fingerprint) {
    // Location of Drupal installation.
    $fingerprint[] = DRUPAL_ROOT . '/' . conf_path();

    if (!empty($_SERVER['SERVER_NAME'])) {
      $fingerprint[] = $_SERVER['SERVER_NAME'];
    }

    if (!empty($_SERVER['SERVER_ADDR'])) {
      $fingerprint[] = $_SERVER['SERVER_ADDR'];
    }

    $fingerprint = implode('|', $fingerprint);
    $fingerprint = md5($fingerprint);
  }

  return $fingerprint;
}
